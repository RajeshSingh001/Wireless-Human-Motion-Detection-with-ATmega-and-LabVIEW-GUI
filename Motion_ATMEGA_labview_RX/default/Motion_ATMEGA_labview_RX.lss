
Motion_ATMEGA_labview_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000536  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000536  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000080  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000111  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ac4  00000000  00000000  00000797  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000046d  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000088b  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f3  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000496  00000000  00000000  00002267  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000026fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include"lcd.h"
#include"string.h"
#include<stdlib.h>

void main()
{
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	df 93       	push	r29
  8c:	cf 93       	push	r28
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
  92:	2a 97       	sbiw	r28, 0x0a	; 10
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	de bf       	out	0x3e, r29	; 62
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	cd bf       	out	0x3d, r28	; 61
	USARTInit(51);
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 cb 01 	call	0x396	; 0x396 <USARTInit>
	InitLCD(0);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 2b 01 	call	0x256	; 0x256 <InitLCD>
	char data;
	uint8_t FSR1;
	char arr[10];
	LCDWriteStringXY(0,0,"LABVIEW GUI");
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	0e 94 c2 01 	call	0x384	; 0x384 <LCDGotoXY>
  b4:	80 e6       	ldi	r24, 0x60	; 96
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDWriteString>
	LCDWriteStringXY(0,1,"With PROTEUS");
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	0e 94 c2 01 	call	0x384	; 0x384 <LCDGotoXY>
  c4:	8c e6       	ldi	r24, 0x6C	; 108
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDWriteString>
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	29 e1       	ldi	r18, 0x19	; 25
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  dc:	d9 f7       	brne	.-10     	; 0xd4 <main+0x52>
	_delay_ms(1000);
	LCDClear();
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	0e 94 03 01 	call	0x206	; 0x206 <LCDByte>
	LCDWriteStringXY(0,0,"MotionDet.SYSTEM--------");
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	0e 94 c2 01 	call	0x384	; 0x384 <LCDGotoXY>
  f2:	89 e7       	ldi	r24, 0x79	; 121
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDWriteString>
	if(data=='a')
	   {
	    LCDClear();
	  	FSR1=10;
	    write("FSR1:");
		itoa(FSR1,arr,10);
  fa:	8e 01       	movw	r16, r28
  fc:	0f 5f       	subi	r16, 0xFF	; 255
  fe:	1f 4f       	sbci	r17, 0xFF	; 255
 100:	84 ed       	ldi	r24, 0xD4	; 212
 102:	e8 2e       	mov	r14, r24
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	f8 2e       	mov	r15, r24
	_delay_ms(1000);
	LCDClear();
	LCDWriteStringXY(0,0,"MotionDet.SYSTEM--------");
	while(1)
	{
	data= USARTReadChar();
 108:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USARTReadChar>
	if(data=='a')
 10c:	81 36       	cpi	r24, 0x61	; 97
 10e:	d9 f4       	brne	.+54     	; 0x146 <main+0xc4>
	   {
	    LCDClear();
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 03 01 	call	0x206	; 0x206 <LCDByte>
	  	FSR1=10;
	    write("FSR1:");
 11c:	82 e9       	ldi	r24, 0x92	; 146
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 37 02 	call	0x46e	; 0x46e <write>
		itoa(FSR1,arr,10);
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	b8 01       	movw	r22, r16
 12a:	4a e0       	ldi	r20, 0x0A	; 10
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <itoa>
		write(arr);
 132:	c8 01       	movw	r24, r16
 134:	0e 94 37 02 	call	0x46e	; 0x46e <write>
		USARTWriteChar('\n');
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <USARTWriteChar>
		LCDWriteString("Motion DETECTED");
 140:	88 e9       	ldi	r24, 0x98	; 152
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	1c c0       	rjmp	.+56     	; 0x17e <main+0xfc>
	 	_delay_ms(50);
    	}

	else if(data=='b') 
 146:	82 36       	cpi	r24, 0x62	; 98
 148:	f9 f6       	brne	.-66     	; 0x108 <main+0x86>
	   {
	    LCDClear();
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	0e 94 03 01 	call	0x206	; 0x206 <LCDByte>
	 	FSR1=20;
	    write("FSR1:");
 156:	82 e9       	ldi	r24, 0x92	; 146
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 37 02 	call	0x46e	; 0x46e <write>
		itoa(FSR1,arr,10);
 15e:	84 e1       	ldi	r24, 0x14	; 20
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	b8 01       	movw	r22, r16
 164:	4a e0       	ldi	r20, 0x0A	; 10
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	0e 94 68 02 	call	0x4d0	; 0x4d0 <itoa>
		write(arr);
 16c:	c8 01       	movw	r24, r16
 16e:	0e 94 37 02 	call	0x46e	; 0x46e <write>
		USARTWriteChar('\n');
 172:	8a e0       	ldi	r24, 0x0A	; 10
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 d6 01 	call	0x3ac	; 0x3ac <USARTWriteChar>
		LCDWriteString("NO Motion DETECTED");
 17a:	88 ea       	ldi	r24, 0xA8	; 168
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCDWriteString>
 182:	c7 01       	movw	r24, r14
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x102>
 188:	bf cf       	rjmp	.-130    	; 0x108 <main+0x86>

0000018a <InitADC>:
#include<avr/io.h>

void InitADC()
{
ADMUX=(1<<REFS0);// For Aref=AVcc;
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(7<<ADPS0);
 18e:	87 e8       	ldi	r24, 0x87	; 135
 190:	86 b9       	out	0x06, r24	; 6
}
 192:	08 95       	ret

00000194 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ADMUX&=0xf8;
 194:	97 b1       	in	r25, 0x07	; 7
 196:	98 7f       	andi	r25, 0xF8	; 248
 198:	97 b9       	out	0x07, r25	; 7
	ch=ch&0b00000111;
	ADMUX|=ch;
 19a:	97 b1       	in	r25, 0x07	; 7
 19c:	87 70       	andi	r24, 0x07	; 7
 19e:	89 2b       	or	r24, r25
 1a0:	87 b9       	out	0x07, r24	; 7
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 1a2:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 1a4:	34 9b       	sbis	0x06, 4	; 6
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <ReadADC+0x10>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
 1a8:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
 1aa:	24 b1       	in	r18, 0x04	; 4
 1ac:	35 b1       	in	r19, 0x05	; 5
}
 1ae:	c9 01       	movw	r24, r18
 1b0:	08 95       	ret

000001b2 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 1b2:	84 b3       	in	r24, 0x14	; 20
 1b4:	80 7f       	andi	r24, 0xF0	; 240
 1b6:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 1b8:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 1ba:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8a 95       	dec	r24
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	97 9a       	sbi	0x12, 7	; 18
 1c6:	82 2f       	mov	r24, r18
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 1cc:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 1ce:	82 95       	swap	r24
 1d0:	80 7f       	andi	r24, 0xF0	; 240
 1d2:	92 2f       	mov	r25, r18
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1d8:	97 98       	cbi	0x12, 7	; 18
 1da:	92 2f       	mov	r25, r18
 1dc:	9a 95       	dec	r25
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 1e0:	97 9a       	sbi	0x12, 7	; 18
 1e2:	92 2f       	mov	r25, r18
 1e4:	9a 95       	dec	r25
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 1e8:	93 b3       	in	r25, 0x13	; 19
 1ea:	92 2f       	mov	r25, r18
 1ec:	9a 95       	dec	r25
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1f0:	97 98       	cbi	0x12, 7	; 18
 1f2:	92 2f       	mov	r25, r18
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 1f8:	87 fd       	sbrc	r24, 7
 1fa:	e4 cf       	rjmp	.-56     	; 0x1c4 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 1fc:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 1fe:	84 b3       	in	r24, 0x14	; 20
 200:	8f 60       	ori	r24, 0x0F	; 15
 202:	84 bb       	out	0x14, r24	; 20

}
 204:	08 95       	ret

00000206 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 206:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 208:	66 23       	and	r22, r22
 20a:	11 f4       	brne	.+4      	; 0x210 <LCDByte+0xa>
	CLEAR_RS();
 20c:	96 98       	cbi	0x12, 6	; 18
 20e:	01 c0       	rjmp	.+2      	; 0x212 <LCDByte+0xc>
else
	SET_RS();
 210:	96 9a       	sbi	0x12, 6	; 18
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	82 2f       	mov	r24, r18
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 21a:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 21c:	85 b3       	in	r24, 0x15	; 21
 21e:	93 2f       	mov	r25, r19
 220:	92 95       	swap	r25
 222:	9f 70       	andi	r25, 0x0F	; 15
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 228:	95 bb       	out	0x15, r25	; 21
 22a:	82 2f       	mov	r24, r18
 22c:	8a 95       	dec	r24
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 230:	97 98       	cbi	0x12, 7	; 18
 232:	82 2f       	mov	r24, r18
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 238:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	3f 70       	andi	r19, 0x0F	; 15
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 242:	85 bb       	out	0x15, r24	; 21
 244:	82 2f       	mov	r24, r18
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 24a:	97 98       	cbi	0x12, 7	; 18
 24c:	2a 95       	dec	r18
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 250:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDBusyLoop>
}
 254:	08 95       	ret

00000256 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 256:	1f 93       	push	r17
 258:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25a:	8b e3       	ldi	r24, 0x3B	; 59
 25c:	9b e2       	ldi	r25, 0x2B	; 43
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 262:	84 b3       	in	r24, 0x14	; 20
 264:	8f 60       	ori	r24, 0x0F	; 15
 266:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 268:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 26a:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 26c:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 26e:	85 b3       	in	r24, 0x15	; 21
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 274:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 276:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 278:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	98 2f       	mov	r25, r24
 27e:	9a 95       	dec	r25
 280:	f1 f7       	brne	.-4      	; 0x27e <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 282:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 284:	a9 9a       	sbi	0x15, 1	; 21
 286:	98 2f       	mov	r25, r24
 288:	9a 95       	dec	r25
 28a:	f1 f7       	brne	.-4      	; 0x288 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 28c:	97 98       	cbi	0x12, 7	; 18
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 292:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 296:	81 2f       	mov	r24, r17
 298:	8c 60       	ori	r24, 0x0C	; 12
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	0e 94 03 01 	call	0x206	; 0x206 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 2a0:	88 e2       	ldi	r24, 0x28	; 40
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	0e 94 03 01 	call	0x206	; 0x206 <LCDByte>
}
 2a8:	1f 91       	pop	r17
 2aa:	08 95       	ret

000002ac <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ec 01       	movw	r28, r24
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	0e 94 03 01 	call	0x206	; 0x206 <LCDByte>
	msg++;
 2ba:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2bc:	88 81       	ld	r24, Y
 2be:	88 23       	and	r24, r24
 2c0:	c9 f7       	brne	.-14     	; 0x2b4 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	df 93       	push	r29
 2d2:	cf 93       	push	r28
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <LCDWriteInt+0xe>
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <LCDWriteInt+0x10>
 2d8:	0f 92       	push	r0
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	9c 01       	movw	r18, r24
 2e0:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2e2:	fe 01       	movw	r30, r28
 2e4:	31 96       	adiw	r30, 0x01	; 1
 2e6:	85 e0       	ldi	r24, 0x05	; 5
 2e8:	df 01       	movw	r26, r30
 2ea:	1d 92       	st	X+, r1
 2ec:	8a 95       	dec	r24
 2ee:	e9 f7       	brne	.-6      	; 0x2ea <LCDWriteInt+0x22>
 2f0:	fe 01       	movw	r30, r28
 2f2:	35 96       	adiw	r30, 0x05	; 5
 2f4:	0d c0       	rjmp	.+26     	; 0x310 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 2f6:	c9 01       	movw	r24, r18
 2f8:	6a e0       	ldi	r22, 0x0A	; 10
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	0e 94 41 02 	call	0x482	; 0x482 <__divmodhi4>
 300:	80 83       	st	Z, r24
	val=val/10;
 302:	c9 01       	movw	r24, r18
 304:	6a e0       	ldi	r22, 0x0A	; 10
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	0e 94 41 02 	call	0x482	; 0x482 <__divmodhi4>
 30c:	9b 01       	movw	r18, r22
 30e:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 310:	21 15       	cp	r18, r1
 312:	31 05       	cpc	r19, r1
 314:	81 f7       	brne	.-32     	; 0x2f6 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 316:	bf ef       	ldi	r27, 0xFF	; 255
 318:	0f 3f       	cpi	r16, 0xFF	; 255
 31a:	1b 07       	cpc	r17, r27
 31c:	79 f4       	brne	.+30     	; 0x33c <LCDWriteInt+0x74>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 322:	ae 01       	movw	r20, r28
 324:	4f 5f       	subi	r20, 0xFF	; 255
 326:	5f 4f       	sbci	r21, 0xFF	; 255
 328:	02 c0       	rjmp	.+4      	; 0x32e <LCDWriteInt+0x66>
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	fa 01       	movw	r30, r20
 330:	e2 0f       	add	r30, r18
 332:	f3 1f       	adc	r31, r19
 334:	80 81       	ld	r24, Z
 336:	88 23       	and	r24, r24
 338:	c1 f3       	breq	.-16     	; 0x32a <LCDWriteInt+0x62>
 33a:	04 c0       	rjmp	.+8      	; 0x344 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 33c:	25 e0       	ldi	r18, 0x05	; 5
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	20 1b       	sub	r18, r16
 342:	31 0b       	sbc	r19, r17
 344:	7e 01       	movw	r14, r28
 346:	08 94       	sec
 348:	e1 1c       	adc	r14, r1
 34a:	f1 1c       	adc	r15, r1
 34c:	e2 0e       	add	r14, r18
 34e:	f3 1e       	adc	r15, r19
 350:	89 01       	movw	r16, r18
 352:	09 c0       	rjmp	.+18     	; 0x366 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 354:	f7 01       	movw	r30, r14
 356:	81 91       	ld	r24, Z+
 358:	7f 01       	movw	r14, r30
 35a:	80 5d       	subi	r24, 0xD0	; 208
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	0e 94 03 01 	call	0x206	; 0x206 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 362:	0f 5f       	subi	r16, 0xFF	; 255
 364:	1f 4f       	sbci	r17, 0xFF	; 255
 366:	05 30       	cpi	r16, 0x05	; 5
 368:	11 05       	cpc	r17, r1
 36a:	a4 f3       	brlt	.-24     	; 0x354 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	08 95       	ret

00000384 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 384:	88 32       	cpi	r24, 0x28	; 40
 386:	30 f4       	brcc	.+12     	; 0x394 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 388:	61 11       	cpse	r22, r1
 38a:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	0e 94 03 01 	call	0x206	; 0x206 <LCDByte>
 394:	08 95       	ret

00000396 <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
 396:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
 398:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
 39a:	86 e8       	ldi	r24, 0x86	; 134
 39c:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
 39e:	88 ed       	ldi	r24, 0xD8	; 216
 3a0:	8a b9       	out	0x0a, r24	; 10


}
 3a2:	08 95       	ret

000003a4 <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 3a4:	5f 9b       	sbis	0x0b, 7	; 11
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 3a8:	8c b1       	in	r24, 0x0c	; 12
}
 3aa:	08 95       	ret

000003ac <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3ac:	5d 9b       	sbis	0x0b, 5	; 11
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3b0:	8c b9       	out	0x0c, r24	; 12
}
 3b2:	08 95       	ret

000003b4 <USARTWriteInt>:



void USARTWriteInt(int val,unsigned int field_length)
{
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	df 93       	push	r29
 3ba:	cf 93       	push	r28
 3bc:	00 d0       	rcall	.+0      	; 0x3be <USARTWriteInt+0xa>
 3be:	00 d0       	rcall	.+0      	; 0x3c0 <USARTWriteInt+0xc>
 3c0:	0f 92       	push	r0
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	9c 01       	movw	r18, r24
 3c8:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 3ca:	fe 01       	movw	r30, r28
 3cc:	31 96       	adiw	r30, 0x01	; 1
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	df 01       	movw	r26, r30
 3d2:	1d 92       	st	X+, r1
 3d4:	8a 95       	dec	r24
 3d6:	e9 f7       	brne	.-6      	; 0x3d2 <USARTWriteInt+0x1e>
 3d8:	fe 01       	movw	r30, r28
 3da:	35 96       	adiw	r30, 0x05	; 5
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <USARTWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 3de:	c9 01       	movw	r24, r18
 3e0:	6a e0       	ldi	r22, 0x0A	; 10
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	0e 94 41 02 	call	0x482	; 0x482 <__divmodhi4>
 3e8:	80 83       	st	Z, r24
	val=val/10;
 3ea:	c9 01       	movw	r24, r18
 3ec:	6a e0       	ldi	r22, 0x0A	; 10
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	0e 94 41 02 	call	0x482	; 0x482 <__divmodhi4>
 3f4:	9b 01       	movw	r18, r22
 3f6:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 3f8:	21 15       	cp	r18, r1
 3fa:	31 05       	cpc	r19, r1
 3fc:	81 f7       	brne	.-32     	; 0x3de <USARTWriteInt+0x2a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 3fe:	bf ef       	ldi	r27, 0xFF	; 255
 400:	0f 3f       	cpi	r16, 0xFF	; 255
 402:	1b 07       	cpc	r17, r27
 404:	71 f4       	brne	.+28     	; 0x422 <USARTWriteInt+0x6e>
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	b0 e0       	ldi	r27, 0x00	; 0
		while(str[j]==0) j++;
 40a:	9e 01       	movw	r18, r28
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	01 c0       	rjmp	.+2      	; 0x414 <USARTWriteInt+0x60>
 412:	11 96       	adiw	r26, 0x01	; 1
 414:	f9 01       	movw	r30, r18
 416:	ea 0f       	add	r30, r26
 418:	fb 1f       	adc	r31, r27
 41a:	80 81       	ld	r24, Z
 41c:	88 23       	and	r24, r24
 41e:	c9 f3       	breq	.-14     	; 0x412 <USARTWriteInt+0x5e>
 420:	04 c0       	rjmp	.+8      	; 0x42a <USARTWriteInt+0x76>
	else
		j=5-field_length;
 422:	a5 e0       	ldi	r26, 0x05	; 5
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	a0 1b       	sub	r26, r16
 428:	b1 0b       	sbc	r27, r17

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
 42a:	a5 30       	cpi	r26, 0x05	; 5
 42c:	b1 05       	cpc	r27, r1
 42e:	ac f4       	brge	.+42     	; 0x45a <USARTWriteInt+0xa6>
	{
	USARTWriteChar(48+str[i]);
 430:	ac 0f       	add	r26, r28
 432:	bd 1f       	adc	r27, r29
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	8c 91       	ld	r24, X
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 438:	5d 9b       	sbis	0x0b, 5	; 11
 43a:	fe cf       	rjmp	.-4      	; 0x438 <USARTWriteInt+0x84>
		j=5-field_length;

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
	{
	USARTWriteChar(48+str[i]);
 43c:	80 5d       	subi	r24, 0xD0	; 208
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 43e:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 440:	84 ec       	ldi	r24, 0xC4	; 196
 442:	99 e0       	ldi	r25, 0x09	; 9
 444:	fc 01       	movw	r30, r24
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <USARTWriteInt+0x92>
 44a:	fc 01       	movw	r30, r24
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <USARTWriteInt+0x98>
 450:	fc 01       	movw	r30, r24
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <USARTWriteInt+0x9e>
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <USARTWriteInt+0xa2>
	//USARTWriteChar(48+str[i]);
	for(i=0;i<4;i++)
	{
	_delay_ms(10);
	}
}}
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	cf 91       	pop	r28
 466:	df 91       	pop	r29
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <write>:

void write(char *msg)
{
 46e:	fc 01       	movw	r30, r24
 470:	04 c0       	rjmp	.+8      	; 0x47a <write+0xc>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 472:	5d 9b       	sbis	0x0b, 5	; 11
 474:	fe cf       	rjmp	.-4      	; 0x472 <write+0x4>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 476:	8c b9       	out	0x0c, r24	; 12
{
	
	while(*msg!='\0')
 {
	USARTWriteChar(*msg);
	msg++;
 478:	31 96       	adiw	r30, 0x01	; 1
}}

void write(char *msg)
{
	
	while(*msg!='\0')
 47a:	80 81       	ld	r24, Z
 47c:	88 23       	and	r24, r24
 47e:	c9 f7       	brne	.-14     	; 0x472 <write+0x4>
 {
	USARTWriteChar(*msg);
	msg++;
 }
}
 480:	08 95       	ret

00000482 <__divmodhi4>:
 482:	97 fb       	bst	r25, 7
 484:	09 2e       	mov	r0, r25
 486:	07 26       	eor	r0, r23
 488:	0a d0       	rcall	.+20     	; 0x49e <__divmodhi4_neg1>
 48a:	77 fd       	sbrc	r23, 7
 48c:	04 d0       	rcall	.+8      	; 0x496 <__divmodhi4_neg2>
 48e:	0c d0       	rcall	.+24     	; 0x4a8 <__udivmodhi4>
 490:	06 d0       	rcall	.+12     	; 0x49e <__divmodhi4_neg1>
 492:	00 20       	and	r0, r0
 494:	1a f4       	brpl	.+6      	; 0x49c <__divmodhi4_exit>

00000496 <__divmodhi4_neg2>:
 496:	70 95       	com	r23
 498:	61 95       	neg	r22
 49a:	7f 4f       	sbci	r23, 0xFF	; 255

0000049c <__divmodhi4_exit>:
 49c:	08 95       	ret

0000049e <__divmodhi4_neg1>:
 49e:	f6 f7       	brtc	.-4      	; 0x49c <__divmodhi4_exit>
 4a0:	90 95       	com	r25
 4a2:	81 95       	neg	r24
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	08 95       	ret

000004a8 <__udivmodhi4>:
 4a8:	aa 1b       	sub	r26, r26
 4aa:	bb 1b       	sub	r27, r27
 4ac:	51 e1       	ldi	r21, 0x11	; 17
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <__udivmodhi4_ep>

000004b0 <__udivmodhi4_loop>:
 4b0:	aa 1f       	adc	r26, r26
 4b2:	bb 1f       	adc	r27, r27
 4b4:	a6 17       	cp	r26, r22
 4b6:	b7 07       	cpc	r27, r23
 4b8:	10 f0       	brcs	.+4      	; 0x4be <__udivmodhi4_ep>
 4ba:	a6 1b       	sub	r26, r22
 4bc:	b7 0b       	sbc	r27, r23

000004be <__udivmodhi4_ep>:
 4be:	88 1f       	adc	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	5a 95       	dec	r21
 4c4:	a9 f7       	brne	.-22     	; 0x4b0 <__udivmodhi4_loop>
 4c6:	80 95       	com	r24
 4c8:	90 95       	com	r25
 4ca:	bc 01       	movw	r22, r24
 4cc:	cd 01       	movw	r24, r26
 4ce:	08 95       	ret

000004d0 <itoa>:
 4d0:	fb 01       	movw	r30, r22
 4d2:	9f 01       	movw	r18, r30
 4d4:	e8 94       	clt
 4d6:	42 30       	cpi	r20, 0x02	; 2
 4d8:	c4 f0       	brlt	.+48     	; 0x50a <itoa+0x3a>
 4da:	45 32       	cpi	r20, 0x25	; 37
 4dc:	b4 f4       	brge	.+44     	; 0x50a <itoa+0x3a>
 4de:	4a 30       	cpi	r20, 0x0A	; 10
 4e0:	29 f4       	brne	.+10     	; 0x4ec <itoa+0x1c>
 4e2:	97 fb       	bst	r25, 7
 4e4:	1e f4       	brtc	.+6      	; 0x4ec <itoa+0x1c>
 4e6:	90 95       	com	r25
 4e8:	81 95       	neg	r24
 4ea:	9f 4f       	sbci	r25, 0xFF	; 255
 4ec:	64 2f       	mov	r22, r20
 4ee:	77 27       	eor	r23, r23
 4f0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__udivmodhi4>
 4f4:	80 5d       	subi	r24, 0xD0	; 208
 4f6:	8a 33       	cpi	r24, 0x3A	; 58
 4f8:	0c f0       	brlt	.+2      	; 0x4fc <itoa+0x2c>
 4fa:	89 5d       	subi	r24, 0xD9	; 217
 4fc:	81 93       	st	Z+, r24
 4fe:	cb 01       	movw	r24, r22
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	a1 f7       	brne	.-24     	; 0x4ec <itoa+0x1c>
 504:	16 f4       	brtc	.+4      	; 0x50a <itoa+0x3a>
 506:	5d e2       	ldi	r21, 0x2D	; 45
 508:	51 93       	st	Z+, r21
 50a:	10 82       	st	Z, r1
 50c:	c9 01       	movw	r24, r18
 50e:	0c 94 89 02 	jmp	0x512	; 0x512 <strrev>

00000512 <strrev>:
 512:	dc 01       	movw	r26, r24
 514:	fc 01       	movw	r30, r24
 516:	67 2f       	mov	r22, r23
 518:	71 91       	ld	r23, Z+
 51a:	77 23       	and	r23, r23
 51c:	e1 f7       	brne	.-8      	; 0x516 <strrev+0x4>
 51e:	32 97       	sbiw	r30, 0x02	; 2
 520:	04 c0       	rjmp	.+8      	; 0x52a <strrev+0x18>
 522:	7c 91       	ld	r23, X
 524:	6d 93       	st	X+, r22
 526:	70 83       	st	Z, r23
 528:	62 91       	ld	r22, -Z
 52a:	ae 17       	cp	r26, r30
 52c:	bf 07       	cpc	r27, r31
 52e:	c8 f3       	brcs	.-14     	; 0x522 <strrev+0x10>
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
